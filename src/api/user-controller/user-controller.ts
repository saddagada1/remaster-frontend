/**
 * Generated by orval v6.22.1 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import { useInfiniteQuery, useQuery } from "@tanstack/react-query";
import type {
  InfiniteData,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type { UserResponse } from "../../model";
import { customInstance } from "../../lib/axios";

export const getUserByUsername = (username: string, signal?: AbortSignal) => {
  return customInstance<UserResponse>({
    url: `/user/${username}`,
    method: "GET",
    signal,
  });
};

export const getGetUserByUsernameQueryKey = (username: string) => {
  return [`/user/${username}`] as const;
};

export const getGetUserByUsernameInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getUserByUsername>>>,
  TError = unknown,
>(
  username: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUserByUsername>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetUserByUsernameQueryKey(username);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUserByUsername>>
  > = ({ signal }) => getUserByUsername(username, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!username,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getUserByUsername>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetUserByUsernameInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserByUsername>>
>;
export type GetUserByUsernameInfiniteQueryError = unknown;

export const useGetUserByUsernameInfinite = <
  TData = InfiniteData<Awaited<ReturnType<typeof getUserByUsername>>>,
  TError = unknown,
>(
  username: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUserByUsername>>,
        TError,
        TData
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetUserByUsernameInfiniteQueryOptions(
    username,
    options,
  );

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getGetUserByUsernameQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserByUsername>>,
  TError = unknown,
>(
  username: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserByUsername>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetUserByUsernameQueryKey(username);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUserByUsername>>
  > = ({ signal }) => getUserByUsername(username, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!username,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getUserByUsername>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetUserByUsernameQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserByUsername>>
>;
export type GetUserByUsernameQueryError = unknown;

export const useGetUserByUsername = <
  TData = Awaited<ReturnType<typeof getUserByUsername>>,
  TError = unknown,
>(
  username: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserByUsername>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetUserByUsernameQueryOptions(username, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
