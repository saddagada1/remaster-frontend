/**
 * Generated by orval v6.22.1 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  CreateOrUpdateRemasterPlaysParams,
  CreateRemasterRequest,
  DeleteRemasterParams,
  GetAllRemastersByUserIdParams,
  GetAllUserRemastersParams,
  GetFavouriteRemastersParams,
  GetRecentRemastersParams,
  GetRemasterParams,
  GetTrendingRemastersParams,
  GetUserLikedRemastersParams,
  LikeRemasterParams,
  PageResponseBasicRemasterResponse,
  PageResponseRemasterResponse,
  RemasterResponse,
  SearchRemastersParams,
  UnlikeRemasterParams,
  UpdateRemasterRequest,
} from "../../model";
import { customInstance } from "../../lib/axios";
import type { BodyType } from "../../lib/axios";

export const getAllUserRemasters = (
  params: GetAllUserRemastersParams,
  signal?: AbortSignal,
) => {
  return customInstance<PageResponseRemasterResponse>({
    url: `/user/remaster`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetAllUserRemastersQueryKey = (
  params: GetAllUserRemastersParams,
) => {
  return [`/user/remaster`, ...(params ? [params] : [])] as const;
};

export const getGetAllUserRemastersInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof getAllUserRemasters>>,
    GetAllUserRemastersParams["cursor"]
  >,
  TError = unknown,
>(
  params: GetAllUserRemastersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getAllUserRemasters>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getAllUserRemasters>>,
        QueryKey,
        GetAllUserRemastersParams["cursor"]
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetAllUserRemastersQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAllUserRemasters>>,
    QueryKey,
    GetAllUserRemastersParams["cursor"]
  > = ({ signal, pageParam }) =>
    getAllUserRemasters(
      { ...params, cursor: pageParam || params?.["cursor"] },
      signal,
    );

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getAllUserRemasters>>,
    TError,
    TData,
    Awaited<ReturnType<typeof getAllUserRemasters>>,
    QueryKey,
    GetAllUserRemastersParams["cursor"]
  > & { queryKey: QueryKey };
};

export type GetAllUserRemastersInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllUserRemasters>>
>;
export type GetAllUserRemastersInfiniteQueryError = unknown;

export const useGetAllUserRemastersInfinite = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof getAllUserRemasters>>,
    GetAllUserRemastersParams["cursor"]
  >,
  TError = unknown,
>(
  params: GetAllUserRemastersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getAllUserRemasters>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getAllUserRemasters>>,
        QueryKey,
        GetAllUserRemastersParams["cursor"]
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAllUserRemastersInfiniteQueryOptions(
    params,
    options,
  );

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getGetAllUserRemastersQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllUserRemasters>>,
  TError = unknown,
>(
  params: GetAllUserRemastersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllUserRemasters>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetAllUserRemastersQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAllUserRemasters>>
  > = ({ signal }) => getAllUserRemasters(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllUserRemasters>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllUserRemastersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllUserRemasters>>
>;
export type GetAllUserRemastersQueryError = unknown;

export const useGetAllUserRemasters = <
  TData = Awaited<ReturnType<typeof getAllUserRemasters>>,
  TError = unknown,
>(
  params: GetAllUserRemastersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllUserRemasters>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAllUserRemastersQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const updateRemaster = (
  updateRemasterRequest: BodyType<UpdateRemasterRequest>,
) => {
  return customInstance<RemasterResponse>({
    url: `/user/remaster`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: updateRemasterRequest,
  });
};

export const getUpdateRemasterMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateRemaster>>,
    TError,
    { data: BodyType<UpdateRemasterRequest> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateRemaster>>,
  TError,
  { data: BodyType<UpdateRemasterRequest> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateRemaster>>,
    { data: BodyType<UpdateRemasterRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return updateRemaster(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateRemasterMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateRemaster>>
>;
export type UpdateRemasterMutationBody = BodyType<UpdateRemasterRequest>;
export type UpdateRemasterMutationError = unknown;

export const useUpdateRemaster = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateRemaster>>,
    TError,
    { data: BodyType<UpdateRemasterRequest> },
    TContext
  >;
}) => {
  const mutationOptions = getUpdateRemasterMutationOptions(options);

  return useMutation(mutationOptions);
};
export const createRemaster = (
  createRemasterRequest: BodyType<CreateRemasterRequest>,
) => {
  return customInstance<RemasterResponse>({
    url: `/user/remaster`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createRemasterRequest,
  });
};

export const getCreateRemasterMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createRemaster>>,
    TError,
    { data: BodyType<CreateRemasterRequest> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createRemaster>>,
  TError,
  { data: BodyType<CreateRemasterRequest> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createRemaster>>,
    { data: BodyType<CreateRemasterRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return createRemaster(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateRemasterMutationResult = NonNullable<
  Awaited<ReturnType<typeof createRemaster>>
>;
export type CreateRemasterMutationBody = BodyType<CreateRemasterRequest>;
export type CreateRemasterMutationError = unknown;

export const useCreateRemaster = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createRemaster>>,
    TError,
    { data: BodyType<CreateRemasterRequest> },
    TContext
  >;
}) => {
  const mutationOptions = getCreateRemasterMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteRemaster = (params: DeleteRemasterParams) => {
  return customInstance<string>({
    url: `/user/remaster`,
    method: "DELETE",
    params,
  });
};

export const getDeleteRemasterMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteRemaster>>,
    TError,
    { params: DeleteRemasterParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteRemaster>>,
  TError,
  { params: DeleteRemasterParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteRemaster>>,
    { params: DeleteRemasterParams }
  > = (props) => {
    const { params } = props ?? {};

    return deleteRemaster(params);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteRemasterMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteRemaster>>
>;

export type DeleteRemasterMutationError = unknown;

export const useDeleteRemaster = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteRemaster>>,
    TError,
    { params: DeleteRemasterParams },
    TContext
  >;
}) => {
  const mutationOptions = getDeleteRemasterMutationOptions(options);

  return useMutation(mutationOptions);
};
export const unlikeRemaster = (params: UnlikeRemasterParams) => {
  return customInstance<string>({
    url: `/user/remaster/unlike`,
    method: "POST",
    params,
  });
};

export const getUnlikeRemasterMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof unlikeRemaster>>,
    TError,
    { params: UnlikeRemasterParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof unlikeRemaster>>,
  TError,
  { params: UnlikeRemasterParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof unlikeRemaster>>,
    { params: UnlikeRemasterParams }
  > = (props) => {
    const { params } = props ?? {};

    return unlikeRemaster(params);
  };

  return { mutationFn, ...mutationOptions };
};

export type UnlikeRemasterMutationResult = NonNullable<
  Awaited<ReturnType<typeof unlikeRemaster>>
>;

export type UnlikeRemasterMutationError = unknown;

export const useUnlikeRemaster = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof unlikeRemaster>>,
    TError,
    { params: UnlikeRemasterParams },
    TContext
  >;
}) => {
  const mutationOptions = getUnlikeRemasterMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getUserLikedRemasters = (
  params: GetUserLikedRemastersParams,
  signal?: AbortSignal,
) => {
  return customInstance<PageResponseBasicRemasterResponse>({
    url: `/user/remaster/like`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetUserLikedRemastersQueryKey = (
  params: GetUserLikedRemastersParams,
) => {
  return [`/user/remaster/like`, ...(params ? [params] : [])] as const;
};

export const getGetUserLikedRemastersInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof getUserLikedRemasters>>,
    GetUserLikedRemastersParams["cursor"]
  >,
  TError = unknown,
>(
  params: GetUserLikedRemastersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUserLikedRemasters>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getUserLikedRemasters>>,
        QueryKey,
        GetUserLikedRemastersParams["cursor"]
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetUserLikedRemastersQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUserLikedRemasters>>,
    QueryKey,
    GetUserLikedRemastersParams["cursor"]
  > = ({ signal, pageParam }) =>
    getUserLikedRemasters(
      { ...params, cursor: pageParam || params?.["cursor"] },
      signal,
    );

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getUserLikedRemasters>>,
    TError,
    TData,
    Awaited<ReturnType<typeof getUserLikedRemasters>>,
    QueryKey,
    GetUserLikedRemastersParams["cursor"]
  > & { queryKey: QueryKey };
};

export type GetUserLikedRemastersInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserLikedRemasters>>
>;
export type GetUserLikedRemastersInfiniteQueryError = unknown;

export const useGetUserLikedRemastersInfinite = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof getUserLikedRemasters>>,
    GetUserLikedRemastersParams["cursor"]
  >,
  TError = unknown,
>(
  params: GetUserLikedRemastersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUserLikedRemasters>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getUserLikedRemasters>>,
        QueryKey,
        GetUserLikedRemastersParams["cursor"]
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetUserLikedRemastersInfiniteQueryOptions(
    params,
    options,
  );

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getGetUserLikedRemastersQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserLikedRemasters>>,
  TError = unknown,
>(
  params: GetUserLikedRemastersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserLikedRemasters>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetUserLikedRemastersQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUserLikedRemasters>>
  > = ({ signal }) => getUserLikedRemasters(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUserLikedRemasters>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetUserLikedRemastersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserLikedRemasters>>
>;
export type GetUserLikedRemastersQueryError = unknown;

export const useGetUserLikedRemasters = <
  TData = Awaited<ReturnType<typeof getUserLikedRemasters>>,
  TError = unknown,
>(
  params: GetUserLikedRemastersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserLikedRemasters>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetUserLikedRemastersQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const likeRemaster = (params: LikeRemasterParams) => {
  return customInstance<string>({
    url: `/user/remaster/like`,
    method: "POST",
    params,
  });
};

export const getLikeRemasterMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof likeRemaster>>,
    TError,
    { params: LikeRemasterParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof likeRemaster>>,
  TError,
  { params: LikeRemasterParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof likeRemaster>>,
    { params: LikeRemasterParams }
  > = (props) => {
    const { params } = props ?? {};

    return likeRemaster(params);
  };

  return { mutationFn, ...mutationOptions };
};

export type LikeRemasterMutationResult = NonNullable<
  Awaited<ReturnType<typeof likeRemaster>>
>;

export type LikeRemasterMutationError = unknown;

export const useLikeRemaster = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof likeRemaster>>,
    TError,
    { params: LikeRemasterParams },
    TContext
  >;
}) => {
  const mutationOptions = getLikeRemasterMutationOptions(options);

  return useMutation(mutationOptions);
};
export const createOrUpdateRemasterPlays = (
  params: CreateOrUpdateRemasterPlaysParams,
) => {
  return customInstance<string>({
    url: `/open/remaster/play`,
    method: "POST",
    params,
  });
};

export const getCreateOrUpdateRemasterPlaysMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createOrUpdateRemasterPlays>>,
    TError,
    { params: CreateOrUpdateRemasterPlaysParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createOrUpdateRemasterPlays>>,
  TError,
  { params: CreateOrUpdateRemasterPlaysParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createOrUpdateRemasterPlays>>,
    { params: CreateOrUpdateRemasterPlaysParams }
  > = (props) => {
    const { params } = props ?? {};

    return createOrUpdateRemasterPlays(params);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateOrUpdateRemasterPlaysMutationResult = NonNullable<
  Awaited<ReturnType<typeof createOrUpdateRemasterPlays>>
>;

export type CreateOrUpdateRemasterPlaysMutationError = unknown;

export const useCreateOrUpdateRemasterPlays = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createOrUpdateRemasterPlays>>,
    TError,
    { params: CreateOrUpdateRemasterPlaysParams },
    TContext
  >;
}) => {
  const mutationOptions =
    getCreateOrUpdateRemasterPlaysMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getUserRemaster = (id: string, signal?: AbortSignal) => {
  return customInstance<RemasterResponse>({
    url: `/user/remaster/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetUserRemasterQueryKey = (id: string) => {
  return [`/user/remaster/${id}`] as const;
};

export const getGetUserRemasterInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getUserRemaster>>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUserRemaster>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUserRemasterQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserRemaster>>> = ({
    signal,
  }) => getUserRemaster(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getUserRemaster>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetUserRemasterInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserRemaster>>
>;
export type GetUserRemasterInfiniteQueryError = unknown;

export const useGetUserRemasterInfinite = <
  TData = InfiniteData<Awaited<ReturnType<typeof getUserRemaster>>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUserRemaster>>,
        TError,
        TData
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetUserRemasterInfiniteQueryOptions(id, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getGetUserRemasterQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserRemaster>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserRemaster>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUserRemasterQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserRemaster>>> = ({
    signal,
  }) => getUserRemaster(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getUserRemaster>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetUserRemasterQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserRemaster>>
>;
export type GetUserRemasterQueryError = unknown;

export const useGetUserRemaster = <
  TData = Awaited<ReturnType<typeof getUserRemaster>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserRemaster>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetUserRemasterQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getRemaster = (
  id: string,
  params?: GetRemasterParams,
  signal?: AbortSignal,
) => {
  return customInstance<RemasterResponse>({
    url: `/open/remaster/${id}`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetRemasterQueryKey = (
  id: string,
  params?: GetRemasterParams,
) => {
  return [`/open/remaster/${id}`, ...(params ? [params] : [])] as const;
};

export const getGetRemasterInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof getRemaster>>,
    GetRemasterParams
  >,
  TError = unknown,
>(
  id: string,
  params?: GetRemasterParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getRemaster>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getRemaster>>,
        QueryKey,
        GetRemasterParams
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetRemasterQueryKey(id, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRemaster>>,
    QueryKey,
    GetRemasterParams
  > = ({ signal }) => getRemaster(id, { ...params }, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getRemaster>>,
    TError,
    TData,
    Awaited<ReturnType<typeof getRemaster>>,
    QueryKey,
    GetRemasterParams
  > & { queryKey: QueryKey };
};

export type GetRemasterInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRemaster>>
>;
export type GetRemasterInfiniteQueryError = unknown;

export const useGetRemasterInfinite = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof getRemaster>>,
    GetRemasterParams
  >,
  TError = unknown,
>(
  id: string,
  params?: GetRemasterParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getRemaster>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getRemaster>>,
        QueryKey,
        GetRemasterParams
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRemasterInfiniteQueryOptions(id, params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getGetRemasterQueryOptions = <
  TData = Awaited<ReturnType<typeof getRemaster>>,
  TError = unknown,
>(
  id: string,
  params?: GetRemasterParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRemaster>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetRemasterQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRemaster>>> = ({
    signal,
  }) => getRemaster(id, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getRemaster>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetRemasterQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRemaster>>
>;
export type GetRemasterQueryError = unknown;

export const useGetRemaster = <
  TData = Awaited<ReturnType<typeof getRemaster>>,
  TError = unknown,
>(
  id: string,
  params?: GetRemasterParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRemaster>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRemasterQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getTrendingRemasters = (
  params: GetTrendingRemastersParams,
  signal?: AbortSignal,
) => {
  return customInstance<PageResponseRemasterResponse>({
    url: `/open/remaster/trending`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetTrendingRemastersQueryKey = (
  params: GetTrendingRemastersParams,
) => {
  return [`/open/remaster/trending`, ...(params ? [params] : [])] as const;
};

export const getGetTrendingRemastersInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof getTrendingRemasters>>,
    GetTrendingRemastersParams["cursor"]
  >,
  TError = unknown,
>(
  params: GetTrendingRemastersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTrendingRemasters>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getTrendingRemasters>>,
        QueryKey,
        GetTrendingRemastersParams["cursor"]
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetTrendingRemastersQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTrendingRemasters>>,
    QueryKey,
    GetTrendingRemastersParams["cursor"]
  > = ({ signal, pageParam }) =>
    getTrendingRemasters(
      { ...params, cursor: pageParam || params?.["cursor"] },
      signal,
    );

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getTrendingRemasters>>,
    TError,
    TData,
    Awaited<ReturnType<typeof getTrendingRemasters>>,
    QueryKey,
    GetTrendingRemastersParams["cursor"]
  > & { queryKey: QueryKey };
};

export type GetTrendingRemastersInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTrendingRemasters>>
>;
export type GetTrendingRemastersInfiniteQueryError = unknown;

export const useGetTrendingRemastersInfinite = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof getTrendingRemasters>>,
    GetTrendingRemastersParams["cursor"]
  >,
  TError = unknown,
>(
  params: GetTrendingRemastersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTrendingRemasters>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getTrendingRemasters>>,
        QueryKey,
        GetTrendingRemastersParams["cursor"]
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetTrendingRemastersInfiniteQueryOptions(
    params,
    options,
  );

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getGetTrendingRemastersQueryOptions = <
  TData = Awaited<ReturnType<typeof getTrendingRemasters>>,
  TError = unknown,
>(
  params: GetTrendingRemastersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTrendingRemasters>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetTrendingRemastersQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTrendingRemasters>>
  > = ({ signal }) => getTrendingRemasters(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTrendingRemasters>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetTrendingRemastersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTrendingRemasters>>
>;
export type GetTrendingRemastersQueryError = unknown;

export const useGetTrendingRemasters = <
  TData = Awaited<ReturnType<typeof getTrendingRemasters>>,
  TError = unknown,
>(
  params: GetTrendingRemastersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTrendingRemasters>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetTrendingRemastersQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const searchRemasters = (
  params: SearchRemastersParams,
  signal?: AbortSignal,
) => {
  return customInstance<PageResponseRemasterResponse>({
    url: `/open/remaster/search`,
    method: "GET",
    params,
    signal,
  });
};

export const getSearchRemastersQueryKey = (params: SearchRemastersParams) => {
  return [`/open/remaster/search`, ...(params ? [params] : [])] as const;
};

export const getSearchRemastersInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof searchRemasters>>,
    SearchRemastersParams["cursor"]
  >,
  TError = unknown,
>(
  params: SearchRemastersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof searchRemasters>>,
        TError,
        TData,
        Awaited<ReturnType<typeof searchRemasters>>,
        QueryKey,
        SearchRemastersParams["cursor"]
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSearchRemastersQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof searchRemasters>>,
    QueryKey,
    SearchRemastersParams["cursor"]
  > = ({ signal, pageParam }) =>
    searchRemasters(
      { ...params, cursor: pageParam || params?.["cursor"] },
      signal,
    );

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof searchRemasters>>,
    TError,
    TData,
    Awaited<ReturnType<typeof searchRemasters>>,
    QueryKey,
    SearchRemastersParams["cursor"]
  > & { queryKey: QueryKey };
};

export type SearchRemastersInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof searchRemasters>>
>;
export type SearchRemastersInfiniteQueryError = unknown;

export const useSearchRemastersInfinite = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof searchRemasters>>,
    SearchRemastersParams["cursor"]
  >,
  TError = unknown,
>(
  params: SearchRemastersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof searchRemasters>>,
        TError,
        TData,
        Awaited<ReturnType<typeof searchRemasters>>,
        QueryKey,
        SearchRemastersParams["cursor"]
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getSearchRemastersInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getSearchRemastersQueryOptions = <
  TData = Awaited<ReturnType<typeof searchRemasters>>,
  TError = unknown,
>(
  params: SearchRemastersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchRemasters>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSearchRemastersQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof searchRemasters>>> = ({
    signal,
  }) => searchRemasters(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof searchRemasters>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SearchRemastersQueryResult = NonNullable<
  Awaited<ReturnType<typeof searchRemasters>>
>;
export type SearchRemastersQueryError = unknown;

export const useSearchRemasters = <
  TData = Awaited<ReturnType<typeof searchRemasters>>,
  TError = unknown,
>(
  params: SearchRemastersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchRemasters>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getSearchRemastersQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getRecentRemasters = (
  params: GetRecentRemastersParams,
  signal?: AbortSignal,
) => {
  return customInstance<PageResponseRemasterResponse>({
    url: `/open/remaster/recent`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetRecentRemastersQueryKey = (
  params: GetRecentRemastersParams,
) => {
  return [`/open/remaster/recent`, ...(params ? [params] : [])] as const;
};

export const getGetRecentRemastersInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof getRecentRemasters>>,
    GetRecentRemastersParams["cursor"]
  >,
  TError = unknown,
>(
  params: GetRecentRemastersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getRecentRemasters>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getRecentRemasters>>,
        QueryKey,
        GetRecentRemastersParams["cursor"]
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetRecentRemastersQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRecentRemasters>>,
    QueryKey,
    GetRecentRemastersParams["cursor"]
  > = ({ signal, pageParam }) =>
    getRecentRemasters(
      { ...params, cursor: pageParam || params?.["cursor"] },
      signal,
    );

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getRecentRemasters>>,
    TError,
    TData,
    Awaited<ReturnType<typeof getRecentRemasters>>,
    QueryKey,
    GetRecentRemastersParams["cursor"]
  > & { queryKey: QueryKey };
};

export type GetRecentRemastersInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRecentRemasters>>
>;
export type GetRecentRemastersInfiniteQueryError = unknown;

export const useGetRecentRemastersInfinite = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof getRecentRemasters>>,
    GetRecentRemastersParams["cursor"]
  >,
  TError = unknown,
>(
  params: GetRecentRemastersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getRecentRemasters>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getRecentRemasters>>,
        QueryKey,
        GetRecentRemastersParams["cursor"]
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRecentRemastersInfiniteQueryOptions(
    params,
    options,
  );

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getGetRecentRemastersQueryOptions = <
  TData = Awaited<ReturnType<typeof getRecentRemasters>>,
  TError = unknown,
>(
  params: GetRecentRemastersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRecentRemasters>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetRecentRemastersQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRecentRemasters>>
  > = ({ signal }) => getRecentRemasters(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getRecentRemasters>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetRecentRemastersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRecentRemasters>>
>;
export type GetRecentRemastersQueryError = unknown;

export const useGetRecentRemasters = <
  TData = Awaited<ReturnType<typeof getRecentRemasters>>,
  TError = unknown,
>(
  params: GetRecentRemastersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRecentRemasters>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRecentRemastersQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getFavouriteRemasters = (
  params: GetFavouriteRemastersParams,
  signal?: AbortSignal,
) => {
  return customInstance<PageResponseRemasterResponse>({
    url: `/open/remaster/favourite`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetFavouriteRemastersQueryKey = (
  params: GetFavouriteRemastersParams,
) => {
  return [`/open/remaster/favourite`, ...(params ? [params] : [])] as const;
};

export const getGetFavouriteRemastersInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof getFavouriteRemasters>>,
    GetFavouriteRemastersParams["cursor"]
  >,
  TError = unknown,
>(
  params: GetFavouriteRemastersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getFavouriteRemasters>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getFavouriteRemasters>>,
        QueryKey,
        GetFavouriteRemastersParams["cursor"]
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetFavouriteRemastersQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getFavouriteRemasters>>,
    QueryKey,
    GetFavouriteRemastersParams["cursor"]
  > = ({ signal, pageParam }) =>
    getFavouriteRemasters(
      { ...params, cursor: pageParam || params?.["cursor"] },
      signal,
    );

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getFavouriteRemasters>>,
    TError,
    TData,
    Awaited<ReturnType<typeof getFavouriteRemasters>>,
    QueryKey,
    GetFavouriteRemastersParams["cursor"]
  > & { queryKey: QueryKey };
};

export type GetFavouriteRemastersInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getFavouriteRemasters>>
>;
export type GetFavouriteRemastersInfiniteQueryError = unknown;

export const useGetFavouriteRemastersInfinite = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof getFavouriteRemasters>>,
    GetFavouriteRemastersParams["cursor"]
  >,
  TError = unknown,
>(
  params: GetFavouriteRemastersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getFavouriteRemasters>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getFavouriteRemasters>>,
        QueryKey,
        GetFavouriteRemastersParams["cursor"]
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetFavouriteRemastersInfiniteQueryOptions(
    params,
    options,
  );

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getGetFavouriteRemastersQueryOptions = <
  TData = Awaited<ReturnType<typeof getFavouriteRemasters>>,
  TError = unknown,
>(
  params: GetFavouriteRemastersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getFavouriteRemasters>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetFavouriteRemastersQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getFavouriteRemasters>>
  > = ({ signal }) => getFavouriteRemasters(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getFavouriteRemasters>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetFavouriteRemastersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getFavouriteRemasters>>
>;
export type GetFavouriteRemastersQueryError = unknown;

export const useGetFavouriteRemasters = <
  TData = Awaited<ReturnType<typeof getFavouriteRemasters>>,
  TError = unknown,
>(
  params: GetFavouriteRemastersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getFavouriteRemasters>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetFavouriteRemastersQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getAllRemastersByUserId = (
  id: string,
  params: GetAllRemastersByUserIdParams,
  signal?: AbortSignal,
) => {
  return customInstance<PageResponseRemasterResponse>({
    url: `/open/remaster/all/${id}`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetAllRemastersByUserIdQueryKey = (
  id: string,
  params: GetAllRemastersByUserIdParams,
) => {
  return [`/open/remaster/all/${id}`, ...(params ? [params] : [])] as const;
};

export const getGetAllRemastersByUserIdInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof getAllRemastersByUserId>>,
    GetAllRemastersByUserIdParams["cursor"]
  >,
  TError = unknown,
>(
  id: string,
  params: GetAllRemastersByUserIdParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getAllRemastersByUserId>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getAllRemastersByUserId>>,
        QueryKey,
        GetAllRemastersByUserIdParams["cursor"]
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetAllRemastersByUserIdQueryKey(id, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAllRemastersByUserId>>,
    QueryKey,
    GetAllRemastersByUserIdParams["cursor"]
  > = ({ signal, pageParam }) =>
    getAllRemastersByUserId(
      id,
      { ...params, cursor: pageParam || params?.["cursor"] },
      signal,
    );

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getAllRemastersByUserId>>,
    TError,
    TData,
    Awaited<ReturnType<typeof getAllRemastersByUserId>>,
    QueryKey,
    GetAllRemastersByUserIdParams["cursor"]
  > & { queryKey: QueryKey };
};

export type GetAllRemastersByUserIdInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllRemastersByUserId>>
>;
export type GetAllRemastersByUserIdInfiniteQueryError = unknown;

export const useGetAllRemastersByUserIdInfinite = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof getAllRemastersByUserId>>,
    GetAllRemastersByUserIdParams["cursor"]
  >,
  TError = unknown,
>(
  id: string,
  params: GetAllRemastersByUserIdParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getAllRemastersByUserId>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getAllRemastersByUserId>>,
        QueryKey,
        GetAllRemastersByUserIdParams["cursor"]
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAllRemastersByUserIdInfiniteQueryOptions(
    id,
    params,
    options,
  );

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getGetAllRemastersByUserIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllRemastersByUserId>>,
  TError = unknown,
>(
  id: string,
  params: GetAllRemastersByUserIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllRemastersByUserId>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetAllRemastersByUserIdQueryKey(id, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAllRemastersByUserId>>
  > = ({ signal }) => getAllRemastersByUserId(id, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllRemastersByUserId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllRemastersByUserIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllRemastersByUserId>>
>;
export type GetAllRemastersByUserIdQueryError = unknown;

export const useGetAllRemastersByUserId = <
  TData = Awaited<ReturnType<typeof getAllRemastersByUserId>>,
  TError = unknown,
>(
  id: string,
  params: GetAllRemastersByUserIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllRemastersByUserId>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAllRemastersByUserIdQueryOptions(
    id,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
